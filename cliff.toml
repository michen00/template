# git-cliff configuration file
# https://git-cliff.org/docs/configuration

[bump]
breaking_always_bump_major = false

[changelog]

# header, body, and footer keys are Tera templates
# https://keats.github.io/tera/docs/#introduction
header = """
<!-- markdownlint-configure-file { "no-duplicate-heading": false } -->\n
\n
# Changelog\n
All notable changes will be documented in this file. See [conventional commits](https://www.conventionalcommits.org) for commit guidelines.\n
The format is based on [Keep a Changelog](https://keepachangelog.com) and this project adheres to [Semantic Versioning](https://semver.org).\n
"""

body = """
{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]($REPO/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [Unreleased]
{% endif %}\
{% for group, commits in commits | unique(attribute="message") | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        - **({{commit.scope}})**{% if commit.breaking %} [**breaking**]{% endif %} \
            {{ commit.message }} - ([{{ commit.id | truncate(length=7, end="") }}]($REPO/commit/{{ commit.id }})) - [{{ commit.author.name }}](mailto:{{ commit.author.email }})
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if commit.scope -%}
        {% else -%}
            - {% if commit.breaking %} [**breaking**]{% endif %}\
                {{ commit.message }} - ([{{ commit.id | truncate(length=7, end="") }}]($REPO/commit/{{ commit.id }})) - [{{ commit.author.name }}](mailto:{{ commit.author.email }})
        {% endif -%}
    {% endfor -%}
{% endfor %}\n
"""

footer = """
<!-- generated by git-cliff -->
"""

# Remove leading and trailing whitespaces from the changelog's body.
trim = true

# RegEx-based postprocessors for modifying the changelog.
# postprocessors = [
#     # Replace the placeholder with a URL.
#     { pattern = '\$REPO', replace = "https://github.com/<user>/<repo>" },
# ]

# render body even when there are no releases to process
# render_always = true
# output file path
# output = "test.md"

[git]

# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true

# Exclude commits that do not match the conventional commits specification.
filter_unconventional = false

# Require all commits to be conventional.
# Takes precedence over filter_unconventional.
require_conventional = false

# Split commits on newlines, treating each line as an individual commit.
split_commits = false

# RegEx-based parsers for modifying commit messages prior to further processing.
commit_preprocessors = [
    # Replace issue numbers with link templates to be updated in `changelog.postprocessors`.
    # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },
    # Check spelling of the commit message using https://github.com/crate-ci/typos.
    # If the spelling is incorrect, it will be fixed automatically.
    # { pattern = '.*', replace_command = 'typos --write-changes -' },
    # Hyperlink commit links, with short commit hash as description.
    # { pattern = "<REPO>/commit/([a-f0-9]{7})[a-f0-9]*", replace = "commit [${1}](${0})" },
]

commit_parsers = [
    { message = "^\\d+\\.\\d+\\.\\d+$", skip = true },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore: merge", skip = true },
    { message = "^docs\\(blame\\)", skip = true },
    { message = "^docs: update .git-blame-ignore-revs", skip = true },
    { message = "^feat", group = "<!-- 00 -->‚ú® Features" },
    { message = "^fix", group = "<!-- 01 -->üêõ Bug Fixes" },
    { message = "^perf", group = "<!-- 02 -->‚ö° Performance" },
    { message = "^test", group = "<!-- 03 -->üß™ Testing" },
    { message = "^ci", group = "<!-- 04 -->üíö Continuous Integration" },
    { message = "^build", group = "<!-- 05 -->üë∑ Build" },
    { message = "^doc", group = "<!-- 06 -->üìù Documentation" },
    { message = "^refactor", group = "<!-- 07 -->‚ôªÔ∏è Refactor" },
    { message = "^style", group = "<!-- 08 -->üé® Styling" },
    { message = "^chore", group = "<!-- 09 -->‚öôÔ∏è Miscellaneous Tasks" },
    { body = ".*security", group = "<!-- 10 -->üõ°Ô∏è Security" },
    { message = "^revert", group = "<!-- 11 -->‚è™Ô∏è Revert" },
    { message = "^.*", group = "<!-- 12 -->üíº Other" },
]

protect_breaking_commits = true

# Exclude commits that are not matched by any commit parser.
filter_commits = false

# Order releases topologically instead of chronologically.
topo_order = true

# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "newest"
